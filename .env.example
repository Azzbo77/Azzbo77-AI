# .env
# This file defines environment variables for the Docker Compose setup, centralizing configuration for Open WebUI,
# SearXNG, Ollama, and Redis. These variables are referenced in docker-compose.yml to avoid hardcoding.

# Open WebUI configuration
# Configures how Open WebUI connects to the AI model runtime (Ollama) and web search (SearXNG)
OLLAMA_API_BASE_URL=http://model-runtime:11434
# Specifies the URL for Ollama's API, used by Open WebUI to send AI model requests.
# Uses 'model-runtime' as the service name in the Docker network for internal communication.

OLLAMA_BASE_URL=http://model-runtime:11434
# Defines the base URL for Ollama, often the same as the API URL, for Open WebUI to access models.
# Matches the service name in docker-compose.yml for consistency.

ENABLE_RAG_WEB_SEARCH=True
# Enables Retrieval-Augmented Generation (RAG) web search in Open WebUI, allowing the AI to fetch online data.

RAG_WEB_SEARCH_ENGINE=searxng
# Sets SearXNG as the search engine for RAG, a privacy-focused engine integrated into your setup.

SEARXNG_QUERY_URL=http://search-engine:8080/search?q=<query>&format=json
# Defines the URL Open WebUI uses to query SearXNG. '<query>' is a placeholder for search terms.
# Uses 'search-engine' as the Docker service name and requests JSON-formatted results for parsing.

RAG_WEB_SEARCH_RESULT_COUNT=5
# Limits web search results to 5 per query, balancing relevance and performance.

RAG_WEB_SEARCH_CONCURRENT_REQUESTS=10
# Allows up to 10 simultaneous search requests, optimizing speed for complex queries.

# SearXNG configuration
SEARXNG_BASE_URL=http://localhost:8080/
# Sets the external base URL for SearXNG, used for browser access or redirects.
# 'localhost:8080' works for local testing; replace with your server's IP/hostname for external access.

# Redis WebSocket configuration for Open WebUI
ENABLE_WEBSOCKET_SUPPORT=true
# Activates WebSocket functionality in Open WebUI for real-time communication (e.g., live AI responses).

WEBSOCKET_MANAGER=redis
# Specifies Redis as the backend to manage WebSocket connections, ensuring efficient handling of live updates.

WEBSOCKET_REDIS_URL=redis://redis-valkey:6379/1
# Defines the connection URL for Redis, pointing to the 'redis-valkey' service on port 6379, database 1.
# Database 1 isolates WebSocket data from other Redis uses.

# Notes:
# - Replace values like 'localhost' with your server's IP/hostname for external access.
# - Service names (e.g., 'model-runtime', 'search-engine') resolve within the Docker network.
# - Keep this file secure, as it contains configuration details for your setup.